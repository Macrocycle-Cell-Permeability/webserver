}
plots[[i]] <- p
}
# Combine the plots into a single row
combined_plot <- do.call(grid.arrange, c(plots, ncol = length(plots),
top = "Feature Distribution of Papp Dataset"))
ggsave("Feature_Papp.png", plot = combined_plot, width = 12, height = 4, dpi = 300)
print("combined_plot")
library(tidyverse)
data_all_features <- data_all[,4:13]
long_data <- pivot_longer(data_all_features, cols = 1:9, names_to = "Feature", values_to = "Value")
# Create faceted violin plots
plot <- ggplot(long_data, aes(x = Set, y = Value, fill = Set)) +
geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) + # Create violin plot
#geom_jitter(width = 0.2, height = 0, size = 0.5, alpha = 0.5) + # Add data points
facet_wrap(~Feature, scales = "free_y", ncol = 5) +
scale_fill_brewer(palette = "Set2") + # Different colors for each set
theme_minimal() + # Minimal theme
theme(strip.text.x = element_text(angle = 0, hjust = 0.5)) # Adjust title of each panel
# Save the plot with increased size
ggsave("violin_plot_large.jpg", plot, width = 40, height = 20, units = "cm")
plot
data_all <- read.csv(file = 'Combine.csv', header = T, as.is = T, dec = ".", na.strings = ".")
data_PCA <- data_all[4:12]
library('corrr')
library(ggcorrplot)
macrocycle_normalized <- scale(data_PCA)
head(macrocycle_normalized)
corr_matrix <- cor(macrocycle_normalized)
ggcorrplot(corr_matrix,
title = "Corrlation of Features in Papp and Peff Dataset")
library("FactoMineR")
library('factoextra')
data.pca <- PCA(data_PCA, graph = FALSE)
eig.val <- get_eigenvalue(data.pca)
eig.val
fviz_eig(data.pca, title = "Scree Plot of Features in Papp and Peff Dataset",
addlabels = TRUE, ylim = c(0, 60))
fviz_pca_var(data.pca,
title = "PCA Loading Plots of Papp and Pe Dataset, PC1 vs PC2",
xlab = 'PC1 (50.6%)', ylab='PC2(23.7%)',
col.var = "purple",
labelsize = 3
)
fviz_pca_ind(data.pca,
title = "PCA Score Plot of Papp Dataset vs Pe Dataset, PC1 vs PC2",
xlab = 'PC1 (50.6%)', ylab='PC2(23.7%)',
geom.ind = "point", # show points only (nbut not "text")
col.ind = data_all$Set, # color by groups
palette = c("#00AFBB", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_var(data.pca,
axes = c(1, 3), # specify PC1 and PC3
title = "PCA Loading Plots of Papp and Pe Dataset, PC1 vs PC3",
xlab = 'PC1 (50.6%)', ylab='PC3 (10.1%)',
col.var = "Purple",
labelsize = 3)
fviz_pca_ind(data.pca,
axes = c(1, 3), # specify PC1 and PC3
title = "PCA Score Plot of Papp Dataset vs Pe Dataset, PC1 vs PC3",
xlab = 'PC1 (50.6%)', ylab='PC3 (10.1%)', # Update labels with appropriate percentages
geom.ind = "point", # show points only (not "text")
col.ind = data_all$Set, # color by groups
palette = c("#00AFBB", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
#fviz_pca_biplot(data.pca, repel = TRUE,
#                col.var = "#2E9FDF", # Variables color
#                col.ind = "#696969" ,labelsize = 5 # Individuals color
#                )
#
fviz_pca_ind(data.pca,
title = "PCA Coloured by Permeability Group in Both Dataset,PC1 vs PC2",
xlab = 'PC1 (50.6%)', ylab='PC2(23.7%)',
geom.ind = "point", # show points only (nbut not "text")
col.ind = data_all$Per_Class, # color by groups
palette = c("Green", "Red", "Blue"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(data.pca,
axes = c(1, 3), # specify PC1 and PC3
title = "PCA Coloured by Permeability Group in Both Dataset,PC1 vs PC3 ",
xlab = 'PC1 (50.6%)', ylab='PC3 (10.1%)',
geom.ind = "point",
col.ind = data_all$Per_Class, # color by groups
palette = c("Green", "Red", "Blue"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(data.pca,
title = "PCA Coloured by Peptidic Ratio Group in Both Dataset,PC1 vs PC2 ",
xlab = 'PC1 (50.6%)', ylab='PC2(23.7%)',
geom.ind = "point", # show points only (nbut not "text")
col.ind = data_all$Peptidic_Type, # color by groups
palette = c("Green", "RED", "Blue"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(data.pca,
axes = c(1, 3), # specify PC1 and PC3
title = "PCA Coloured by Peptidic Ratio Group in Both Dataset,PC1 vs PC3",
xlab = 'PC1 (50.6%)', ylab='PC3 (10.1%)',
geom.ind = "point",
col.ind = data_all$Peptidic_Type, # color by groups
palette = c('Green', "Red", "Blue"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
library(Rtsne)
set.seed(101) # for reproducibility
## Plot using ggplot2
#tsne_results_1 <- Rtsne(data_app[, -which(names(data_app) == "Per_Class","Peptidic_Type")], #perplexity = 30, theta = 0.0, dims = 2)
## Create a data frame for plotting
#tsne_data_1 <- data.frame(X = tsne_results_1$Y[,1], Y = tsne_results_1$Y[,2], Group = #data_app$Per_Class)
#
#ggplot(tsne_data_1, aes(x = X, y = Y, color = Group)) +
#  geom_point() +
#  ggtitle("t-SNE of Each Permeability Group, Papp") +
#  xlab("t-SNE Dimension 1") + ylab("t-SNE Dimension 2") +
#  scale_color_manual(values = c("Green", "Red", "Blue")) +
#  theme_minimal() +
#  labs(color = "Groups")
#tsne_results_2 <-  Rtsne(data_app[, -which(names(data_app) == "Per_Class","Peptidic_Type")], #perplexity = 30, theta = 0.0, dims = 2)
## Create a data frame for plotting
#tsne_data_2 <- data.frame(X = tsne_results_2$Y[,1], Y = tsne_results_2$Y[,2], Group = #data_app$Peptidic_Type)
#
## Plot using ggplot2
#ggplot(tsne_data_2, aes(x = X, y = Y, color = Group)) +
#  geom_point() +
#  ggtitle("t-SNE of Each Peptidic Group, Papp") +
#  xlab("t-SNE Dimension 1") + ylab("t-SNE Dimension 2") +
#  scale_color_manual(values = c("Green", "Red", "Blue")) +
#  theme_minimal() +
#  labs(color = "Groups")
tsne_results <- Rtsne(data_eff[, -which(names(data_eff) == "Peptidic_Type","Per_Class")], perplexity = 30, theta = 0.0, dims = 2)
# Create a data frame for plotting
tsne_data <- data.frame(X = tsne_results$Y[,1], Y = tsne_results$Y[,2], Group = data_eff$Peptidic_Type)
# Plot using ggplot2
ggplot(tsne_data, aes(x = X, y = Y, color = Group)) +
geom_point() +
ggtitle("t-SNE of Each Peptidic Group, Peff") +
xlab("t-SNE Dimension 1") + ylab("t-SNE Dimension 2") +
scale_color_manual(values = c("Green", "Blue")) +
theme_minimal() +
labs(color = "Groups")
tsne_results <- Rtsne(data_eff[, -which(names(data_eff) == "Per_Class","Peptidic_Type")], perplexity = 30, theta = 0.0, dims = 2)
# Create a data frame for plotting
tsne_data <- data.frame(X = tsne_results$Y[,1], Y = tsne_results$Y[,2], Group = data_eff$Per_Class)
ggplot(tsne_data, aes(x = X, y = Y, color = Group)) +
geom_point() +
ggtitle("t-SNE of Each Permeability Group,Peff") +
xlab("t-SNE Dimension 1") + ylab("t-SNE Dimension 2") +
scale_color_manual(values = c("Green", "Red", "Blue")) +
theme_minimal() +
labs(color = "Groups")
tsne_results <- Rtsne(data_app[, -which(names(data_app) == "Per_Class","Peptidic_Type")], perplexity = 30, theta = 0.0, dims = 2)
# Create a data frame for plotting
tsne_data <- data.frame(X = tsne_results$Y[,1], Y = tsne_results$Y[,2], Group = data_app$Per_Class)
ggplot(tsne_data, aes(x = X, y = Y, color = Group)) +
geom_point() +
ggtitle("t-SNE of Each Permeability Group,Papp") +
xlab("t-SNE Dimension 1") + ylab("t-SNE Dimension 2") +
scale_color_manual(values = c("Green", "Red", "Blue")) +
theme_minimal() +
labs(color = "Groups")
tsne_results <- Rtsne(data_app[, -which(names(data_app) == "Peptidic_Type","Per_Class")], perplexity = 30, theta = 0.0, dims = 2)
# Create a data frame for plotting
tsne_data <- data.frame(X = tsne_results$Y[,1], Y = tsne_results$Y[,2], Group = data_app$Peptidic_Type)
# Plot using ggplot2
ggplot(tsne_data, aes(x = X, y = Y, color = Group)) +
geom_point() +
ggtitle("t-SNE of Each Peptidic Group, Papp") +
xlab("t-SNE Dimension 1") + ylab("t-SNE Dimension 2") +
scale_color_manual(values = c("Green", "Blue","Red")) +
theme_minimal() +
labs(color = "Groups")
app_normalized <- scale(data_app_features)
head(app_normalized)
corr_matrix_app <- cor(app_normalized)
ggcorrplot(corr_matrix_app,
title = "Corrlation of Features in Papp Dataset")
data.pca_app <- PCA(data_app_features, graph = FALSE)
eig.val <- get_eigenvalue(data.pca_app)
fviz_eig(data.pca_app, title = "Scree Plot of Features in Papp Dataset",
addlabels = TRUE, ylim = c(0, 60))
fviz_pca_var(data.pca_app,
title = "PCA Loading Plots of Papp Dataset, PC1 vs PC2",
xlab = 'PC1 (44.9%)', ylab='PC2(23.9%)',
col.var = "purple",
labelsize = 3
)
fviz_pca_var(data.pca_app,
axes = c(1, 3), # specify PC1 and PC3
title = "PCA Loading Plots of Papp Dataset, PC1 vs PC3",
xlab = 'PC1 (44.9%)', ylab='PC3 (12.6%)',
col.var = "Purple",
labelsize = 3)
fviz_pca_ind(data.pca_app,
title = "PCA Coloured by Permeability Group in Papp Dataset,PC1 vs PC2",
xlab = 'PC1 (44.9%)', ylab='PC2(23.9%)',
geom.ind = "point", # show points only (nbut not "text")
col.ind = data_app$Per_Class, # color by groups
palette = c("Green", "Red", "Blue"),
addEllipses = F, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(data.pca_app,
axes = c(1, 3), # specify PC1 and PC3
title = "PCA Coloured by Permeability Group in Papp Dataset,PC1 vs PC3 ",
xlab = 'PC1 (44.9%)', ylab='PC3 (12.6%)',
geom.ind = "point",
col.ind = data_app$Per_Class, # color by groups
palette = c("Green", "Red", "Blue"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(data.pca_app,
title = "PCA Coloured by Peptidic Group in Papp Dataset,PC1 vs PC2",
xlab = 'PC1 (44.9%)', ylab='PC2(23.9%)',
geom.ind = "point", # show points only (nbut not "text")
col.ind = data_app$Peptidic_Type, # color by groups
palette = c("Green", "Red", "Blue"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(data.pca_app,
axes = c(1, 3), # specify PC1 and PC3
title = "PCA Coloured by Peptidic Group in Papp Dataset,PC1 vs PC3 ",
xlab = 'PC1 (44.9%)', ylab='PC3 (12.6%)',
geom.ind = "point",
col.ind = data_app$Peptidic_Type, # color by groups
palette = c("Green", "Red", "Blue"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
eff_normalized <- scale(data_eff_features)
head(eff_normalized)
corr_matrix_eff <- cor(eff_normalized)
ggcorrplot(corr_matrix_eff,
title = "Corrlation of Features in Peff Dataset")
data.pca_eff <- PCA(data_eff_features, graph = FALSE)
eig.val <- get_eigenvalue(data.pca_eff)
fviz_eig(data.pca_eff, title = "Scree Plot of Features in Peff Dataset",
addlabels = TRUE, ylim = c(0, 70))
fviz_pca_var(data.pca_eff,
title = "PCA Loading Plots of Peff Dataset, PC1 vs PC2",
xlab = 'PC1 (66.0%)', ylab='PC2(21.0%)',
col.var = "purple",
labelsize = 3
)
fviz_pca_var(data.pca_eff,
axes = c(1, 3), # specify PC1 and PC3
title = "PCA Loading Plots of Peff Dataset, PC1 vs PC3",
xlab = 'PC1 (66.0%)', ylab='PC3 (7.1%)',
col.var = "Purple",
labelsize = 3)
fviz_pca_ind(data.pca_eff,
title = "PCA Coloured by Permeability Group in Peff Dataset,PC1 vs PC2",
xlab = 'PC1 (61.0%)', ylab='PC2(21.0%)',
geom.ind = "point", # show points only (nbut not "text")
col.ind = data_eff$Per_Class, # color by groups
palette = c("Green", "Red", "Blue"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(data.pca_eff,
axes = c(1, 3), # specify PC1 and PC3
title = "PCA Coloured by Permeability Group in Peff Dataset,PC1 vs PC3 ",
xlab = 'PC1 (61.0%)', ylab='PC3 (7.1%)',
geom.ind = "point",
col.ind = data_eff$Per_Class, # color by groups
palette = c("Green", "Red", "Blue"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(data.pca_eff,
title = "PCA Coloured by Peptidic Group in Peff Dataset,PC1 vs PC2",
xlab = 'PC1 (61.0%)', ylab='PC2(21.0%)',
geom.ind = "point", # show points only (nbut not "text")
col.ind = data_eff$Peptidic_Type, # color by groups
palette = c("Green", "Blue"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(data.pca_eff,
axes = c(1, 3), # specify PC1 and PC3
title = "PCA Coloured by Peptidic Group in Peff Dataset,PC1 vs PC3 ",
xlab = 'PC1 (61.0%)', ylab='PC3 (7.1%)',
geom.ind = "point",
col.ind = data_eff$Peptidic_Type, # color by groups
palette = c("Green", "Blue"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_biplot(data.pca_app,
title = "PCA Coloured by Permeability Group in Papp Dataset,PC1 vs PC2",
xlab = 'PC1 (44.9%)', ylab='PC2(23.9%)',
geom.ind = "point", # show points only (nbut not "text")
col.ind = data_app$Per_Class, # color by groups
palette = c("Green", "Red", "Blue"),
addEllipses = F, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_biplot(data.pca_app,
title = "PCA Coloured by Permeability Group in Papp Dataset,PC1 vs PC2",
xlab = 'PC1 (44.9%)', ylab='PC2(23.9%)',
geom.ind = "point", # show points only (nbut not "text")
col.ind = data_app$Per_Class, # color by groups
palette = c("Green", "Red", "Blue"),
addEllipses = F, # Concentration ellipses
legend.title = "Groups",
col.var = "orange"
)
fviz_pca_biplot(data.pca_app,
title = "PCA Coloured by Permeability Group in Papp Dataset,PC1 vs PC2",
xlab = 'PC1 (44.9%)', ylab='PC2(23.9%)',
geom.ind = "point", # show points only (nbut not "text")
col.ind = data_app$Per_Class, # color by groups
palette = c("Green", "Red", "Blue"),
addEllipses = F, # Concentration ellipses
legend.title = "Groups",
col.var = "gray"
)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
setwd('/Users/qiushifeng/Desktop/macrocycle/summary')
getwd()
data <- read.csv(file = 'data0404_cp.csv', header = T, as.is = T, dec = ".", na.strings = ".")
View(data)
summary(data[cLogP])
summary(data[:cLogP])
summary(data[["cLogP"]])
summary(data[["Molecular_Weight"]])
summary(data[["Num_H_Acceptors"]])
summary(data[["Num_H_Donors"]])
summary(data[["cLogP"]])
summary(data[["Molecular_Weight"]])
summary(data[["Num_H_Acceptors"]])
summary(data[["Num_H_Donors"]])
summary(data[["cLogP"]])
summary(data[["TPSA"]])
summary(data[["Macrocycle_Ring_Size"]])
summary(data[["Macrocycle_Overall_Amide_Ratio"]])
summary(data[["Kier_index"]])
knitr::opts_chunk$set(echo = TRUE)
# Load the data
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
# Calculate counts based on specified conditions
count_Molecular_Weight_over_500 <- sum(data$Molecular_Weight > 500, na.rm = TRUE)
count_Num_H_Acceptors_over_10 <- sum(data$Num_H_Acceptors > 10, na.rm = TRUE)
count_Num_H_Donors_over_5 <- sum(data$Num_H_Donors > 5, na.rm = TRUE)
count_cLogP_over_5 <- sum(data$cLogP > 5, na.rm = TRUE)
count_TPSA_over_140 <- sum(data$TPSA > 140, na.rm = TRUE)
count_nrot <- sum(data$nRotB > 10, na.rm = TRUE)
# Print the results
cat("Compounds with Molecular Weight > 500:", count_Molecular_Weight_over_500, "\n")
cat("Compounds with Num_H_Acceptors > 10:", count_Num_H_Acceptors_over_10, "\n")
cat("Compounds with Num_H_Donors > 5:", count_Num_H_Donors_over_5, "\n")
cat("Compounds with cLogP > 5:", count_cLogP_over_5, "\n")
cat("Compounds with TPSA > 140:", count_TPSA_over_140, "\n")
# Load the data
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
# Calculate counts based on specified conditions
count_Molecular_Weight_over_500 <- sum(data$Molecular_Weight > 500, na.rm = TRUE)
count_Num_H_Acceptors_over_10 <- sum(data$Num_H_Acceptors > 10, na.rm = TRUE)
count_Num_H_Donors_over_5 <- sum(data$Num_H_Donors > 5, na.rm = TRUE)
count_cLogP_over_5 <- sum(data$cLogP > 5, na.rm = TRUE)
count_TPSA_over_140 <- sum(data$TPSA > 140, na.rm = TRUE)
count_nrot <- sum(data$nRotB > 10, na.rm = TRUE)
# Print the results
cat("Compounds with Molecular Weight > 500:", count_Molecular_Weight_over_500, "\n")
cat("Compounds with Num_H_Acceptors > 10:", count_Num_H_Acceptors_over_10, "\n")
cat("Compounds with Num_H_Donors > 5:", count_Num_H_Donors_over_5, "\n")
cat("Compounds with cLogP > 5:", count_cLogP_over_5, "\n")
cat("Compounds with TPSA > 140:", count_TPSA_over_140, "\n")
cat("Compounds with nRotB > 10:", count_nrot, "\n")
View(data)
# Load the data
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
# Calculate counts based on specified conditions
count_Molecular_Weight_over_500 <- sum(data$Molecular_Weight > 500, na.rm = TRUE)
count_Num_H_Acceptors_over_10 <- sum(data$Num_H_Acceptors > 10, na.rm = TRUE)
count_Num_H_Donors_over_5 <- sum(data$Num_H_Donors > 5, na.rm = TRUE)
count_cLogP_over_5 <- sum(data$cLogP > 5, na.rm = TRUE)
count_TPSA_over_140 <- sum(data$TPSA > 140, na.rm = TRUE)
count_nrot <- sum(data$Num_Rotatable_Bonds > 10, na.rm = TRUE)
# Print the results
cat("Compounds with Molecular Weight > 500:", count_Molecular_Weight_over_500, "\n")
cat("Compounds with Num_H_Acceptors > 10:", count_Num_H_Acceptors_over_10, "\n")
cat("Compounds with Num_H_Donors > 5:", count_Num_H_Donors_over_5, "\n")
cat("Compounds with cLogP > 5:", count_cLogP_over_5, "\n")
cat("Compounds with TPSA > 140:", count_TPSA_over_140, "\n")
cat("Compounds with nRotB > 10:", count_nrot, "\n")
knitr::opts_chunk$set(echo = TRUE)
# Calculate counts based on specified conditions
bRo5_data <- data[
data$Molecular_Weight >= 700 & data$Molecular_Weight <= 3000 &
(data$cLogP < 0 | data$cLogP > 7.5) &
data$Num_H_Donors > 5 &
data$Num_H_Acceptors > 10 &
data$TPSA > 200 &
data$nRotB > 20,
]
View(bRo5_data)
View(bRo5_data)
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
bRo5_data <- data[
data$Molecular_Weight >= 700 & data$Molecular_Weight <= 3000 &
(data$cLogP < 0 | data$cLogP > 7.5) &
data$Num_H_Donors > 5 &
data$Num_H_Acceptors > 10 &
data$TPSA > 200 &
data$nRotB > 20,
]
View(bRo5_data)
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
bRo5_data <- data[
data$Molecular_Weight >= 700 & data$Molecular_Weight <= 3000 |
(data$cLogP < 0 | data$cLogP > 7.5) |
data$Num_H_Donors > 5 |
data$Num_H_Acceptors > 10 |
data$TPSA > 200 |
data$nRotB > 20,
]
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
data <- data[datadata$Molecular_Weight >500]
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
data <- data[data$Molecular_Weight >500]
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
data2 <- data[data$Molecular_Weight >500]
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
bRo5_data_raw <- data[
data$Molecular_Weight >= 500
]
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
bRo5_data_raw <- data[
data$Molecular_Weight >= 500
]
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
bRo5_data <- data[
data$Molecular_Weight >= 500
]
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
# Define the filter condition
filtered_data <- data[data$Molecular_Weight > 500 & (
(data$Molecular_Weight >= 700 & data$Molecular_Weight <= 3000) |
data$cLogP < 0 |
data$cLogP > 7.5 |
data$HBD > 5 |
data$HBA > 10 |
data$PSA > 200 |
data$NRotB > 20
), ]
# Count the entries that meet these conditions
count_filtered <- nrow(filtered_data)
View(filtered_data)
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
# Define the filter condition
filtered_data <- data[data$Molecular_Weight > 500 & (
(data$Molecular_Weight >= 700 & data$Molecular_Weight <= 3000) |
data$cLogP < 0 |
data$cLogP > 7.5 |
data$Num_H_Donors > 5 |
data$Num_H_Acceptors > 10 |
data$TPSA > 200 |
data$Num_Rotatable_Bonds > 20
), ]
# Count the entries that meet these conditions
count_filtered <- nrow(filtered_data)
View(filtered_data)
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
# Define the filter condition
bRo5_data <- data[data$Molecular_Weight > 500 & (
(data$Molecular_Weight >= 700 & data$Molecular_Weight <= 3000) |
data$cLogP < 0 |
data$cLogP > 7.5 |
data$Num_H_Donors > 5 |
data$Num_H_Acceptors > 10 |
data$TPSA > 200 |
data$Num_Rotatable_Bonds > 20
), ]
# Count the entries that meet these conditions
count_filtered <- nrow(filtered_data)
# Calculate counts based on specified conditions
data <- read.csv(file = 'data0404_cp.csv', header = TRUE, as.is = TRUE, dec = ".", na.strings = ".")
# Define the filter condition
bRo5_data <- data[data$Molecular_Weight > 500 & (
(data$Molecular_Weight >= 700 & data$Molecular_Weight <= 3000) |
data$cLogP < 0 |
data$cLogP > 7.5 |
data$Num_H_Donors > 5 |
data$Num_H_Acceptors > 10 |
data$TPSA > 200 |
data$Num_Rotatable_Bonds > 20
), ]
